unit Model.Connections.Firedac;

interface

uses
  Model.Connections.Interafaces,
  System.Classes,
  Data.DB,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs,
  FireDAC.Phys.SQLiteWrapper.Stat,
  FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client;

type
  TModelConnectionsFiredac = class(TInterfacedObject, iModelConnectionGeneric)
    private
      FDConnection1: TFDConnection;
      FDQuery1: TFDQuery;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iModelConnectionGeneric;
      function SQL : TStrings;
      function Open : iModelConnectionGeneric;
      function DataSource ( aValue : TDataSource ) : iModelConnectionGeneric;
      function ExecSQL : iModelConnectionGeneric;
  end;

implementation

{ TModelConnectionsFiredac }

constructor TModelConnectionsFiredac.Create;
begin
  FDConnection1 := TFDConnection.Create(nil);
  FDQuery1 := TFDQuery.Create(nil);
end;

function TModelConnectionsFiredac.DataSource(
  aValue: TDataSource): iModelConnectionGeneric;
begin

end;

destructor TModelConnectionsFiredac.Destroy;
begin
  FDQuery1.Free;
  FDConnection1.Free;
  inherited;
end;

function TModelConnectionsFiredac.ExecSQL: iModelConnectionGeneric;
begin

end;

class function TModelConnectionsFiredac.New: iModelConnectionGeneric;
begin
  Result := Self.Create;
end;

function TModelConnectionsFiredac.Open: iModelConnectionGeneric;
begin

end;

function TModelConnectionsFiredac.SQL: TStrings;
begin

end;

end.
